C
}
##2
cat("\014")
library("readxl")
hw5_wiki<-read_excel('HW5_wiki.xlsx')
#a
hw5<-hw5_wiki[complete.cases(hw5_wiki),]
#b
f <- factanal(hw5,factors=6)
#c
Q <- f$loadings
{ # set all values close to 0 in Q to 0
for(i in 1:nrow(Q)){
for(j in 1:ncol(Q)){
if(abs(Q[i,j])<0.5) Q[i,j]=0
}
}
Q
}
{
print(f <- psych::fa(druguse,nfactors=6,covar=T,fm='pa'))
factor.plot(f)
}
{
print(f <- psych::fa(hw5,nfactors=6,covar=T,fm='pa'))
factor.plot(f)
}
print(f_psych <-fa(hw5,nfactors=6,covar=T,fm='pa'))
factor.plot(f)
cat("\014")
library("readxl")
hw5_wiki<-read_excel('HW5_wiki.xlsx')
#a
hw5<-hw5_wiki[complete.cases(hw5_wiki),]
#b
f <- factanal(hw5,factors=6)
#c
Q <- f$loadings
{ # set all values close to 0 in Q to 0
for(i in 1:nrow(Q)){
for(j in 1:ncol(Q)){
if(abs(Q[i,j])<0.5) Q[i,j]=0
}
}
Q
}
#d
print(f$uniquenesses)
#e
library(psych)
{
print(f_psych <-fa(hw5,nfactors=6,covar=T,fm='pa'))
factor.plot(f)
}
print(f, digits=2, cutoff=.3, sort=TRUE)
print(f, digits=2, cutoff=.5, sort=TRUE)
#c
Q <- f$loadings
{ # set all values close to 0 in Q to 0
for(i in 1:nrow(Q)){
for(j in 1:ncol(Q)){
if(abs(Q[i,j])<0.5) Q[i,j]=0
}
}
Q
}
print(f, digits=2, cutoff=0, sort=TRUE)
print(f, digits=2, cutoff=0.5, sort=TRUE)
print(f, digits=2, cutoff=0.5, sort=FALSE)
##2
cat("\014")
library("readxl")
hw5_wiki<-read_excel('HW5_wiki.xlsx')
#a
hw5<-hw5_wiki[complete.cases(hw5_wiki),]
#b
f <- factanal(hw5,factors=6)
#c
print(f, digits=3, cutoff=0.5, sort=FALSE)
#c
print(f$loadings, digits=3, cutoff=0.5, sort=FALSE)
##2
cat("\014")
library("readxl")
hw5_wiki<-read_excel('HW5_wiki.xlsx')
#a
hw5<-hw5_wiki[complete.cases(hw5_wiki),]
#b
f <- factanal(hw5,factors=6)
#c
print(f$loadings, digits=3, cutoff=0.5, sort=FALSE)
#d
print(f$uniquenesses)
#e
color <- c("red2","green","blue","cyan4","magenta4","yellow")
biplot(f,choices=c(1,2),col=color,cex=.75,pc.biplot = T)
biplot(x = hw5, y = f$loadings,choices=c(1,2),col=color,cex=.75,pc.biplot = T)
library(psych)
fa.graph(f_psych<-fa(f))
f_psych <- fa(druguse,nfactors=6,covar=T,fm='pa')
factor.plot(f)
factor.(f_psych)
factor.plot(f_psych)
f_psych <- fa(f,nfactors=6,covar=T,fm='pa')
factor.plot(f_psych)
##2
cat("\014")
library("readxl")
hw5_wiki<-read_excel('HW5_wiki.xlsx')
#a
hw5<-hw5_wiki[complete.cases(hw5_wiki),]
#b
f <- factanal(hw5,factors=6)
#c
print(f$loadings, digits=3, cutoff=0.5, sort=FALSE)
#d
print(f$uniquenesses)
#e
color <- c("red2","green","blue","cyan4","magenta4","yellow")
library(psych)
f_psych <- fa(f,nfactors=6,covar=T,fm='pa')
factor.plot(f_psych)
f_psych <- fa(hw5,nfactors=6,covar=T,fm='pa')
factor.plot(f_psych)
factor.graph(f_psych)
f_psych <- fa.graph(hw5,nfactors=6,covar=T,fm='pa')
factor.plot(f_psych)
f_psych <- fa(hw5,nfactors=6,covar=T,fm='pa')
factor.plot(f_psych)
f_psych <- fa.diagram(hw5,nfactors=6,covar=T,fm='pa')
f_psych <- fa(hw5,nfactors=6,covar=T,fm='pa')
fa.diagram(f_psych)
fa.graph(f_psych)
fa.diagram
fa.diagram(f_psych)
fa.multi.diagram(f_psych)
fa.organize(f_psych)
fa.plot(f_psych)
fa.rgraph(f_psych)
fa.congruence(f_psych)
factor.scores(f_psych)
factor2cluster(f_psych)
factor2cluster(f_psych,aslist = TRUE)
##2
cat("\014")
library("readxl")
hw5_wiki<-read_excel('HW5_wiki.xlsx')
#a
hw5<-hw5_wiki[complete.cases(hw5_wiki),]
#b
f <- factanal(hw5,factors=6)
#c
print(f$loadings, digits=3, cutoff=0.5, sort=FALSE)
#d
print(f$uniquenesses)
#e
color <- c("red2","green","blue","cyan4","magenta4","yellow")
#e
library(psych)
f_psych <- fa(hw5,nfactors=6,covar=T,fm='pa')
factor2cluster(f_psych,aslist = TRUE)
View(hw5)
cat("\014")
##1
load('HW5_BostonHousing.RDAT')
cat("\014")
##1
load('HW5_BostonHousing.RDAT')
#a
Boston$chas<-NULL
#b
Boston_sample_covariance<-cov(Boston)
#c
Boston_eigen<-eigen(Boston_sample_covariance)
Boston_eigenvalues<-Boston_eigen$values
Boston_eigenvectors<-Boston_eigen$vectors
remove(Boston_eigen)
#d
Lambda<-diag(Boston_eigenvalues)
v_lambda_v<-Boston_eigenvectors%*%Lambda%*%t(Boston_eigenvectors)
print(Boston_sample_covariance - v_lambda_v)
remove(Lambda,v_lambda_v)
#e
pca<-princomp(Boston)
#f
Boston_pca_variance<-(pca$sdev)^2
#g
pca.V <- pca$loadings[1:ncol(Boston),1:ncol(Boston)]
pca.L <- pca$sdev^2
plot(pca.L,ylab='Eigenvalues',main='Eigenvalues of Sample Covariance Matrix S')
#h
plot(pca$scores[,1],pca$scores[,3],xlab='x',ylab='y',main='x vs y')
plot(pca$scores[,1],pca$scores[,3],col=(km$cluster+1),xlab='x',ylab='y',main='x vs y')
#h
print(pca$scores)
#h
plot(pca$scores[,1],pca$scores[,2],xlab='x',ylab='y',main='x vs y')
plot(pca.L,ylab='Eigenvalues',main='Eigenvalues of Sample Covariance Matrix S')
#h
plot(pca$scores[,1],pca$scores[,2],xlab='x',ylab='y',main='x vs y')
#h
print(pca.V)
#h
print(pca$scores)
cat("\014")
remove(Lambda,v_lambda_v,Boston_eigen)
plot(Boston_pca_variance,ylab='Eigenvalues',main='Eigenvalues of Sample Covariance Matrix S')
plot(Boston_pca_variance,ylab='Eigenvalues',main='Eigenvalues of Sample Covariance Matrix S')
View(pca.V)
#g
pca.L <- pca$sdev^2
plot(Boston_pca_variance,ylab='Eigenvalues',main='Eigenvalues of Sample Covariance Matrix S')
#h
print(pca$scores)
plot(pca$scores[,1],pca$scores[,2],xlab='x',ylab='y',main='x vs y')
#h
plot(pca$scores[,1],pca$scores[,2],xlab='x',ylab='y',main='x vs y')
#i
biplot(pca,choices=c(1,2),col=c('gray25','red'),cex=.75,pc.biplot = T)
#h
plot(pca$scores[,1],pca$scores[,2],xlab='Tax',ylab='Race',main='x vs y')
#h
plot(pca$scores[,1],pca$scores[,2],xlab='Tax',ylab='Race',main='Taxes vs Race')
View(Boston)
Boston_top_two<-Boston[tax,race]
View(pca)
pca[["scores"]]
view(pca$scores)
print(pca$scores)
#g
pca.V<-pca$loadings
view(pca.V)
print(pca.V)
#e
pca<-princomp(Boston,covmat = Boston_sample_covariance)
#f
Boston_pca_variance<-(pca$sdev)^2
#g
pca.V<-pca$loadings
print(pca.V)
View(Boston_sample_covariance)
#e
pca<-princomp(Boston,cor = T)
#f
Boston_pca_variance<-(pca$sdev)^2
#g
pca.V<-pca$loadings
print(pca.V)
{
p1 <- sapply(1:6,function(u) pca.L[u]/sum(pca.L))
p2 <- sapply(1:6,function(u) sum(pca.L[1:u])/sum(pca.L))
data.frame(Eigenvalues=pc.L,Proportion_of_Total_Variance=p1,Percentage_Explained=p2)
}
{
p1 <- sapply(1:6,function(u) pca.L[u]/sum(pca.L))
p2 <- sapply(1:6,function(u) sum(pca.L[1:u])/sum(pca.L))
data.frame(Eigenvalues=pca.L,Proportion_of_Total_Variance=p1,Percentage_Explained=p2)
}
{
p1 <- sapply(1:13,function(u) pca.L[u]/sum(pca.L))
p2 <- sapply(1:13,function(u) sum(pca.L[1:u])/sum(pca.L))
data.frame(Eigenvalues=pca.L,Proportion_of_Total_Variance=p1,Percentage_Explained=p2)
}
{
p1 <- sapply(1:13,function(u) pca.L[u]/sum(pca.L))
p2 <- sapply(1:13,function(u) sum(pca.L[1:u])/sum(pca.L))
data.frame(Percentage_Explained=p2)
}
{
p2 <- sapply(1:13,function(u) sum(pca.L[1:u])/sum(pca.L))
data.frame(Percentage_Explained=p2)
}
{
p1 <- sapply(1:13,function(u) pca.L[u]/sum(pca.L))
p2 <- sapply(1:13,function(u) sum(pca.L[1:u])/sum(pca.L))
data.frame(Proportion_of_Total_Variance=p1)
}
{
p1 <- sapply(1:13,function(u) pca.L[u]/sum(pca.L))
p2 <- sapply(1:13,function(u) sum(pca.L[1:u])/sum(pca.L))
data.frame(Proportion_of_Total_Variance=p1 * 100)
}
data.frame(Proportion_of_Total_Variance=p1)
{
p1 <- sapply(1:13,function(u) pca.L[u]/sum(pca.L))
p2 <- sapply(1:13,function(u) sum(pca.L[1:u])/sum(pca.L))
data.frame(Proportion_of_Total_Variance=p1)
}
#i
pca.V<-pca$loadings
pca.L <- pca$sdev^2
{
p1 <- sapply(1:13,function(u) pca.L[u]/sum(pca.L))
p2 <- sapply(1:13,function(u) sum(pca.L[1:u])/sum(pca.L))
data.frame(Proportion_of_Total_Variance=p1)
}
biplot(pca,choices=c(1,2),col=c('gray25','red'),cex=.75,pc.biplot = T)
#i
biplot(pca,choices=c(1,2),col=c('gray25','red'),cex=.75,pc.biplot = T)
##1
load('HW5_BostonHousing.RDAT')
#a
Boston$chas<-NULL
#e
pca<-princomp(Boston,cor = T)
#e
pca<-princomp(Boston)
#i
biplot(pca,choices=c(1,2),col=c('gray25','red'),cex=.75,pc.biplot = T)
#b
Boston_sample_covariance<-cov(Boston)
#b
Boston_sample_covariance<-cov(Boston)
print.data.frame(Boston_sample_covariance,
digits = 3,right = TRUE,)
#b
Boston_sample_covariance<-cov(Boston)
print.data.frame(Boston_sample_covariance)
View(Boston_sample_covariance)
#b
Boston_sample_covariance<-cov(Boston)
print.data.frame(data.frame(Boston_sample_covariance))
print.data.frame(data.frame(Boston_sample_covariance),
digits = 3)
print.data.frame(data.frame(Boston_sample_covariance),
digits = 3, max = 10)
#b
Boston_sample_covariance<-cov(Boston)
print.data.frame(data.frame(Boston_sample_covariance),
digits = 3, max = 13)
#b
Boston_sample_covariance<-cov(Boston)
print.data.frame(data.frame(Boston_sample_covariance),
digits = 3, max = 50)
#b
Boston_sample_covariance<-cov(Boston)
head(Boston_sample_covariance)
tail(Boston_sample_covariance)
#print.data.frame(data.frame(Boston_sample_covariance),
#                 digits = 3)
#b
Boston_sample_covariance<-cov(Boston)
print.data.frame(data.frame(Boston_sample_covariance),
digits = 3, max = 52)
#b
Boston_sample_covariance<-cov(Boston)
DT::datatable(data.frame(Boston_sample_covariance))
#print.data.frame(data.frame(Boston_sample_covariance),
#                 digits = 3, max = 52)
#b
Boston_sample_covariance<-cov(Boston)
knitr::kable(data.frame(Boston_sample_covariance))
#print.data.frame(data.frame(Boston_sample_covariance),
#                 digits = 3)
# 2
```{r}
library("readxl")
hw5_wiki<-read_excel('HW5_wiki.xlsx')
```
#a
```{r}
hw5<-hw5_wiki[complete.cases(hw5_wiki),]
```
#b
```{r}
f <- factanal(hw5,factors=6)
```
#c
```{r}
print(f$loadings, digits=3, cutoff=0.5, sort=FALSE)
```
#d
```{r}
print(f$uniquenesses)
```
#e
```{r}
library(psych)
f_psych <- fa(hw5,nfactors=6,covar=T,fm='pa')
factor2cluster(f_psych,aslist = TRUE)
```
# f
#Factors 1 and 4 are the most significant
#Factor 5 is the least significant
n<-1000
x<-cumsum(sample(c(-1,1), n, replace = TRUE))
plot(x)
x<-cumsum(sample(c(-1,1), n, replace = TRUE))
plot(x)
plot(x, type = "l")
x<-cumsum(sample(c(-1,1), n, replace = TRUE))
plot(x, type = "l")
x<-cumsum(sample(c(-1,1), n, replace = TRUE))
plot(x, type = "l")
p<-1/2
weights<-c(p,1-p)
x<-cumsum(sample(c(-1,1), n, replace = TRUE,prob = weights))
plot(x, type = "l")
x<-cumsum(sample(c(-1,1), n, replace = TRUE,prob = weights))
plot(x, type = "l")
p<-1/3
weights<-c(p,1-p)
x<-cumsum(sample(c(-1,1), n, replace = TRUE,prob = weights))
plot(x, type = "l")
x<-cumsum(sample(c(-1,1), n, replace = TRUE,prob = weights))
plot(x, type = "l")
x<-cumsum(sample(c(-1,1), n, replace = TRUE,prob = weights))
plot(x, type = "l")
p<-1/4
weights<-c(p,1-p)
x<-cumsum(sample(c(-1,1), n, replace = TRUE,prob = weights))
plot(x, type = "l")
p<-1/1000000
weights<-c(p,1-p)
x<-cumsum(sample(c(-1,1), n, replace = TRUE,prob = weights))
plot(x, type = "l")
p<-1/2
weights<-c(p,1-p)
x<-cumsum(sample(c(-1,1), n, replace = TRUE,prob = weights))
plot(x, type = "l")
plot(x, type = "l",main = "Random Walk for `p`")
plot(x, type = "l",main = paste("Random Walk for ", p))
plot(x, type = "l",main = paste("Random Walk for p = ", p))
plot(x, type = "l",main = paste("Random Walk for p=", p))
n<-1000
p_s<-c(1/2,1/3,1/4,1/10,1/100,1/1000000)
for (p in p_s) {
weights<-c(p,1-p)
x<-cumsum(sample(c(-1,1), n, replace = TRUE,prob = weights))
plot(x, type = "l",main = paste("Random Walk for p=", p))
}
f<-function(p) {
e<- 2*p-1
return e
}
n<-1000
p_s<-c(1/2,1/3,1/4,1/10,1/100,1/1000000)
f<-function(p) {
return(2*p-1)
}
for (p in p_s) {
weights<-c(p,1-p)
x<-cumsum(sample(c(-1,1), n, replace = TRUE,prob = weights))
plot(x, type = "l",main = paste("Random Walk for p=", p))
cat("Expected Values are ", f(p), " and ", f(1-p))
}
for (p in p_s) {
weights<-c(p,1-p)
x<-cumsum(sample(c(-1,1), n, replace = TRUE,prob = weights))
plot(x, type = "l",main = paste("Random Walk for p=", p))
cat("\nExpected Values are ", f(p), " and ", f(1-p))
}
n<-1000
p_s<-seq(1/2,1,0.00001)
f<-function(p) {
return(2*p-1)
}
for (p in p_s) {
weights<-c(p,1-p)
x<-cumsum(sample(c(-1,1), n, replace = TRUE,prob = weights))
plot(f(p), type = "l",main = paste("Random Walk for p=", p))
#cat("\nExpected Values are ", f(p), " and ", f(1-p))
}
n<-1000
p_s<-seq(1/2,1,0.00001)
f<-function(p) {
return(2*p-1)
}
plot(f(p_s), type = "l")
for (p in p_s) {
weights<-c(p,1-p)
x<-cumsum(sample(c(-1,1), n, replace = TRUE,prob = weights))
plot(x, type = "l",main = paste("Random Walk for p=", p))
cat("\nExpected Values are ", f(p), " and ", f(1-p))
}
p_s<-seq(0,1/2,0.00001)
f<-function(p) {
return(2*p-1)
}
plot(f(p_s), type = "l")
for (p in p_s) {
weights<-c(p,1-p)
x<-cumsum(sample(c(-1,1), n, replace = TRUE,prob = weights))
plot(x, type = "l",main = paste("Random Walk for p=", p))
cat("\nExpected Values are ", f(p), " and ", f(1-p))
}
p_s<-seq(0,1/2,0.01)
f<-function(p) {
return(2*p-1)
}
plot(f(p_s), type = "l")
for (p in p_s) {
weights<-c(p,1-p)
x<-cumsum(sample(c(-1,1), n, replace = TRUE,prob = weights))
plot(x, type = "l",main = paste("Random Walk for p=", p))
cat("\nExpected Values are ", f(p), " and ", f(1-p))
}
print(f$loadings, digits=3, cutoff=0.5, sort=FALSE)
hw5<-hw5_wiki[complete.cases(hw5_wiki),]
setwd("~/Documents/Bill's Docs/R Studio/MATH_5090/HW5")
hw5<-hw5_wiki[complete.cases(hw5_wiki),]
library("readxl")
hw5_wiki<-read_excel('HW5_wiki.xlsx')
cat("Dimensions: ", dim(hw5_wiki))
hw5<-hw5_wiki[complete.cases(hw5_wiki),]
cat("Dimensions: ", dim(hw5))
f <- factanal(hw5,factors=6)
print(f$loadings, digits=3, cutoff=0.5, sort=FALSE)
kable(data.frame(f$uniquenesses))
source('~/.active-rstudio-document', echo=TRUE)
kable(data.frame(f$uniquenesses))
